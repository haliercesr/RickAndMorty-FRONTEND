{"ast":null,"code":"import { ADD_FAV, REMOVE_FAV, ORDER, FILTER, COUNT } from './types';\nimport axios from 'axios';\nconst URL = 'http://localhost:3001/fav';\nexport const addFav = char => {\n  // es una accion asiNcrona y retornamos una funcion con dispatch\n  return async function (dispatch) {\n    //LA FUNCION DISPATCH ES LA QUE CONTIENE LA PETICION ENTONCES LE PONEMOS EL ASYNC\n    /* axios.post(`${URL}`, char)    // le enviamos la url y necesitamos mandarle la informacion porque es un metodo POST que esta esperando un body, es este caso \"char\"\n     .then(({data})=>{            // tenemos que poner axios.post porque si solo dejamos axios la peticion que llegara al servidor sera de axios.get\n         return dispatch(\n             {\n                 type: ADD_FAV,\n                 payload: data\n             }\n         )\n         })*/\n    //AHORA LA CONVERTIMOS EN ASYNC Y AWAIT\n    try {\n      const {\n        data\n      } = await axios.post(`${URL}`, char);\n      return dispatch({\n        type: ADD_FAV,\n        payload: data\n      });\n    } catch (error) {\n      window.alert(error.message);\n    }\n  };\n};\nexport const removeFav = id => {\n  //con esto logramos quitarle responsabilidad al frontend, la logica ya la hace nuestro servidor y el frontend la muestra, ahora vamos a modificar el reducer\n  return async dispatch => {\n    /*axios.delete(`${URL}/${id}`)\n    .then(({data})=>{\n        return dispatch(   {\n            type: REMOVE_FAV,\n            payload: data\n        })\n    })*/\n    try {\n      const {\n        data\n      } = await axios.delete(`${URL}/${id}`);\n      return dispatch({\n        type: REMOVE_FAV,\n        payload: data\n      });\n    } catch (error) {\n      window.alert(error.message);\n    } //este es el lado del cliente, retornamos un mensaje cons windows.alert\n  };\n};\n\nexport const filterCards = gender => {\n  return {\n    type: FILTER,\n    payload: gender //gender es la propiedad para filtrar como por ejemplo status, origin, etc.\n  };\n};\n\nexport const orderCards = orden => {\n  // orden sera a para ascendente y d para decendente\n  return {\n    type: ORDER,\n    payload: orden\n  };\n};\nexport const counts = number => {\n  return {\n    type: COUNT,\n    payload: number\n  };\n};","map":{"version":3,"names":["ADD_FAV","REMOVE_FAV","ORDER","FILTER","COUNT","axios","URL","addFav","char","dispatch","data","post","type","payload","error","window","alert","message","removeFav","id","delete","filterCards","gender","orderCards","orden","counts","number"],"sources":["/home/cesar/Documentos/Desarrollador-full-Stack/rick_and_morty/CLiente/src/components/redux/actions/actions.js"],"sourcesContent":["import{ADD_FAV,REMOVE_FAV,ORDER,FILTER, COUNT} from './types'\nimport axios from 'axios';\n\nconst URL='http://localhost:3001/fav'\n\nexport const addFav=(char)=>{    // es una accion asiNcrona y retornamos una funcion con dispatch\n    return  async function(dispatch){    //LA FUNCION DISPATCH ES LA QUE CONTIENE LA PETICION ENTONCES LE PONEMOS EL ASYNC\n       /* axios.post(`${URL}`, char)    // le enviamos la url y necesitamos mandarle la informacion porque es un metodo POST que esta esperando un body, es este caso \"char\"\n        .then(({data})=>{            // tenemos que poner axios.post porque si solo dejamos axios la peticion que llegara al servidor sera de axios.get\n            return dispatch(\n                {\n                    type: ADD_FAV,\n                    payload: data\n                }\n            )\n            })*/\n        //AHORA LA CONVERTIMOS EN ASYNC Y AWAIT\n        try{\n        const {data}=await axios.post(`${URL}`, char)\n        return dispatch(\n            {\n                type: ADD_FAV,\n                payload: data\n            }\n        )\n        }catch(error){window.alert(error.message)}\n    }\n    }\n\nexport const removeFav=(id)=>{        //con esto logramos quitarle responsabilidad al frontend, la logica ya la hace nuestro servidor y el frontend la muestra, ahora vamos a modificar el reducer\n    return async (dispatch)=>{\n        /*axios.delete(`${URL}/${id}`)\n        .then(({data})=>{\n            return dispatch(   {\n                type: REMOVE_FAV,\n                payload: data\n            })\n        })*/\n    try{\n      const {data}= await axios.delete(`${URL}/${id}`)\n      return dispatch(   {\n        type: REMOVE_FAV,\n        payload: data\n    })\n    }catch(error){window.alert(error.message)}  //este es el lado del cliente, retornamos un mensaje cons windows.alert\n     \n}\n}\n\nexport const filterCards=(gender)=>{\n    return {\n         type: FILTER,\n         payload: gender       //gender es la propiedad para filtrar como por ejemplo status, origin, etc.\n    }\n}\n\nexport const orderCards=(orden)=>{        // orden sera a para ascendente y d para decendente\n    return{\n    type: ORDER,\n    payload: orden\n   }\n}\n\n\nexport const counts=(number)=>{\nreturn{\n    type:COUNT,\n    payload:number\n}\n}"],"mappings":"AAAA,SAAOA,OAAO,EAACC,UAAU,EAACC,KAAK,EAACC,MAAM,EAAEC,KAAK,QAAO,SAAS;AAC7D,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAC,2BAA2B;AAErC,OAAO,MAAMC,MAAM,GAAEC,IAAI,IAAG;EAAK;EAC7B,OAAQ,gBAAeC,QAAQ,EAAC;IAAK;IAClC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ;IACA,IAAG;MACH,MAAM;QAACC;MAAI,CAAC,GAAC,MAAML,KAAK,CAACM,IAAI,CAAE,GAAEL,GAAI,EAAC,EAAEE,IAAI,CAAC;MAC7C,OAAOC,QAAQ,CACX;QACIG,IAAI,EAAEZ,OAAO;QACba,OAAO,EAAEH;MACb,CAAC,CACJ;IACD,CAAC,QAAMI,KAAK,EAAC;MAACC,MAAM,CAACC,KAAK,CAACF,KAAK,CAACG,OAAO,CAAC;IAAA;EAC7C,CAAC;AACD,CAAC;AAEL,OAAO,MAAMC,SAAS,GAAEC,EAAE,IAAG;EAAS;EAClC,OAAO,MAAOV,QAAQ,IAAG;IACrB;AACR;AACA;AACA;AACA;AACA;AACA;IACI,IAAG;MACD,MAAM;QAACC;MAAI,CAAC,GAAE,MAAML,KAAK,CAACe,MAAM,CAAE,GAAEd,GAAI,IAAGa,EAAG,EAAC,CAAC;MAChD,OAAOV,QAAQ,CAAI;QACjBG,IAAI,EAAEX,UAAU;QAChBY,OAAO,EAAEH;MACb,CAAC,CAAC;IACF,CAAC,QAAMI,KAAK,EAAC;MAACC,MAAM,CAACC,KAAK,CAACF,KAAK,CAACG,OAAO,CAAC;IAAA,CAAC,CAAE;EAEhD,CAAC;AACD,CAAC;;AAED,OAAO,MAAMI,WAAW,GAAEC,MAAM,IAAG;EAC/B,OAAO;IACFV,IAAI,EAAET,MAAM;IACZU,OAAO,EAAES,MAAM,CAAO;EAC3B,CAAC;AACL,CAAC;;AAED,OAAO,MAAMC,UAAU,GAAEC,KAAK,IAAG;EAAS;EACtC,OAAM;IACNZ,IAAI,EAAEV,KAAK;IACXW,OAAO,EAAEW;EACV,CAAC;AACJ,CAAC;AAGD,OAAO,MAAMC,MAAM,GAAEC,MAAM,IAAG;EAC9B,OAAM;IACFd,IAAI,EAACR,KAAK;IACVS,OAAO,EAACa;EACZ,CAAC;AACD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}