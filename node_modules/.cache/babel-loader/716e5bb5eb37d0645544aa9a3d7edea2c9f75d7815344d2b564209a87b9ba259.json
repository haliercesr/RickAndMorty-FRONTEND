{"ast":null,"code":"import { ADD_FAV, REMOVE_FAV, FILTER, ORDER } from \"../actions/types\";\nconst initialState = {\n  myFavorites: [],\n  allCharacters: []\n};\nconsole.log(myFavorites);\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n  //nosotros en el frontend, el cliente antes hacia click en el corazon de una carta y se guardaba en favoritos en nuestro estado global\n  switch (type) {\n    //ahora nuestra action creator es asincrona (antes era sincrona) y puede ser asicrona gracias al redux-thunk que configuramos al principio, como se hace esto? en la misma funcion que esta recibiendo el personaje, una funcion que retorna otra funcion es un clausers o que estamos usando ahora.\n    case ADD_FAV:\n      // se hace una peticion post o delete con axios y los controadores de mi servidor hacen la logica para guardar y enviar los datos de las cartas favoritas\n      return {\n        ...state,\n        allCharacters: payload\n      };\n    case REMOVE_FAV:\n      return {\n        ...state,\n        allCharacters: payload\n      };\n    case FILTER:\n      return {\n        ...state,\n        myFavorites: state.allCharacters.filter(char => {\n          return char.gender === payload;\n        }) //en la action creator el payoad de filter sera la propiedad gender osea male o female\n      };\n\n    case ORDER:\n      return {\n        ...state,\n        ...state,\n        myFavorites: payload === \"A\" ? state.allCharacters.sort(function (a, b) {\n          return a - b;\n        }) : state.allCharacters.sort(function (a, b) {\n          return b - a;\n        }) //el primer .sort los ordena de forma ascendente y el segundo de forma descendente\n      };\n\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["ADD_FAV","REMOVE_FAV","FILTER","ORDER","initialState","myFavorites","allCharacters","console","log","rootReducer","state","arguments","length","undefined","type","payload","filter","char","gender","sort","a","b"],"sources":["/home/cesar/Documentos/Desarrollador-full-Stack/rick_and_morty/CLiente/src/components/redux/reducer/reducer.js"],"sourcesContent":["import { ADD_FAV,REMOVE_FAV,FILTER,ORDER } from \"../actions/types\"\n\n\nconst initialState= {\n    myFavorites : [],\n    allCharacters:[]\n}\nconsole.log(myFavorites)\n\nconst rootReducer=(state=initialState,{type,payload}) => {         //nosotros en el frontend, el cliente antes hacia click en el corazon de una carta y se guardaba en favoritos en nuestro estado global\n    switch(type){                                                  //ahora nuestra action creator es asincrona (antes era sincrona) y puede ser asicrona gracias al redux-thunk que configuramos al principio, como se hace esto? en la misma funcion que esta recibiendo el personaje, una funcion que retorna otra funcion es un clausers o que estamos usando ahora.\n        case ADD_FAV:                                              // se hace una peticion post o delete con axios y los controadores de mi servidor hacen la logica para guardar y enviar los datos de las cartas favoritas\n            return{\n                ...state, \n                allCharacters:payload\n            }\n        case REMOVE_FAV:\n            return{\n                ...state, \n                allCharacters:payload\n            }\n        case FILTER:\n            return{\n                ...state,\n                myFavorites: state.allCharacters.filter((char)=>{return char.gender===payload})    //en la action creator el payoad de filter sera la propiedad gender osea male o female\n            }\n        case ORDER:\n            return{\n                ...state,\n                ...state,\n                myFavorites: payload===\"A\"?state.allCharacters.sort(function(a, b){return a - b}) : state.allCharacters.sort(function(a, b){return b - a})  //el primer .sort los ordena de forma ascendente y el segundo de forma descendente\n            }\n        default:\n            return {...state}\n    }\n}\n\nexport default rootReducer;"],"mappings":"AAAA,SAASA,OAAO,EAACC,UAAU,EAACC,MAAM,EAACC,KAAK,QAAQ,kBAAkB;AAGlE,MAAMC,YAAY,GAAE;EAChBC,WAAW,EAAG,EAAE;EAChBC,aAAa,EAAC;AAClB,CAAC;AACDC,OAAO,CAACC,GAAG,CAACH,WAAW,CAAC;AAExB,MAAMI,WAAW,GAAC,SAAAA,CAAA,EAAuC;EAAA,IAAtCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAACP,YAAY;EAAA,IAAC;IAACU,IAAI;IAACC;EAAO,CAAC,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAe;EAC/D,QAAOC,IAAI;IAAoD;IAC3D,KAAKd,OAAO;MAA+C;MACvD,OAAM;QACF,GAAGU,KAAK;QACRJ,aAAa,EAACS;MAClB,CAAC;IACL,KAAKd,UAAU;MACX,OAAM;QACF,GAAGS,KAAK;QACRJ,aAAa,EAACS;MAClB,CAAC;IACL,KAAKb,MAAM;MACP,OAAM;QACF,GAAGQ,KAAK;QACRL,WAAW,EAAEK,KAAK,CAACJ,aAAa,CAACU,MAAM,CAAEC,IAAI,IAAG;UAAC,OAAOA,IAAI,CAACC,MAAM,KAAGH,OAAO;QAAA,CAAC,CAAC,CAAI;MACvF,CAAC;;IACL,KAAKZ,KAAK;MACN,OAAM;QACF,GAAGO,KAAK;QACR,GAAGA,KAAK;QACRL,WAAW,EAAEU,OAAO,KAAG,GAAG,GAACL,KAAK,CAACJ,aAAa,CAACa,IAAI,CAAC,UAASC,CAAC,EAAEC,CAAC,EAAC;UAAC,OAAOD,CAAC,GAAGC,CAAC;QAAA,CAAC,CAAC,GAAGX,KAAK,CAACJ,aAAa,CAACa,IAAI,CAAC,UAASC,CAAC,EAAEC,CAAC,EAAC;UAAC,OAAOA,CAAC,GAAGD,CAAC;QAAA,CAAC,CAAC,CAAE;MAChJ,CAAC;;IACL;MACI,OAAO;QAAC,GAAGV;MAAK,CAAC;EAAA;AAE7B,CAAC;AAED,eAAeD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}